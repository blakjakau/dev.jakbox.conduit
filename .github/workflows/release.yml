# .github/workflows/release.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0

permissions:
  contents: write
  
jobs:
  build-and-sign:
    name: Build & Sign (${{ matrix.os }}/${{ matrix.arch }})
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: amd64
            binary-name: conduit-macos-x64
          - os: macos-latest
            arch: arm64
            binary-name: conduit-macos-arm64
          - os: windows-latest
            arch: amd64
            binary-name: conduit-windows-x64.exe
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      # --- macOS Build and Sign ---
      - name: Build macOS Binary
        if: runner.os == 'macOS'
        run: |
          export CGO_ENABLED=1
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          GOOS=darwin GOARCH=${{ matrix.arch }} go build -ldflags="-s -w" -o ${{ matrix.binary-name }} .
          echo "Build complete for ${{ matrix.binary-name }}"
          
      - name: Sign macOS Binary
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: |
          # Create entitlements file
          cat <<EOF > entitlements.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>com.apple.security.get-task-allow</key>
            <false/>
          </dict>
          </plist>
          EOF
          
          # Import certificate from secrets into a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-keychain.keychain-db
          echo -n "${{ env.MACOS_CERTIFICATE }}" | base64 --decode -o certificate.p12
          security create-keychain -p "${{ env.MACOS_CERTIFICATE_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ env.MACOS_CERTIFICATE_PASSWORD }}" $KEYCHAIN_PATH
          security import certificate.p12 -k $KEYCHAIN_PATH -P "${{ env.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ env.MACOS_CERTIFICATE_PASSWORD }}" $KEYCHAIN_PATH
          
          # Sign binary using the temporary keychain
          codesign --force --timestamp --options runtime \
            --sign "${{ env.MACOS_SIGNING_IDENTITY }}" \
            --entitlements entitlements.plist \
            --keychain $KEYCHAIN_PATH \
            ${{ matrix.binary-name }}
          echo "Successfully signed ${{ matrix.binary-name }}"

      # --- Windows Build and Sign ---
      - name: Build Windows Binary
        if: runner.os == 'Windows'
        run: go build -ldflags="-s -w" -o ${{ matrix.binary-name }} .
      
      - name: Sign Windows Binary
        if: runner.os == 'Windows'
        env:
          WINDOWS_PFX_CERTIFICATE_B64: ${{ secrets.WINDOWS_PFX_CERTIFICATE_B64 }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
        run: |
          # Decode PFX file from secret
          $pfx_cert_b64 = "${{ env.WINDOWS_PFX_CERTIFICATE_B64 }}"
          $pfx_path = Join-Path -Path $env:RUNNER_TEMP -ChildPath "cert.pfx"
          [System.IO.File]::WriteAllBytes($pfx_path, [System.Convert]::FromBase64String($pfx_cert_b64))
          
          # Find signtool.exe from the Windows SDK
          $signtool = & "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe" | Select-Object -Last 1
          if (-not $signtool) { Write-Error "signtool.exe not found."; exit 1 }
          
          # Sign the file with a timestamp
          & $signtool sign /f $pfx_path /p "${{ env.WINDOWS_PFX_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "${{ matrix.binary-name }}"
          echo "Successfully signed ${{ matrix.binary-name }}"
        shell: pwsh

      # --- Upload Artifacts ---
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary-name }}
          path: ${{ matrix.binary-name }}

  release:
    name: Create GitHub Release
    needs: build-and-sign
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      
      - name: Package artifacts into a single zip file
        run: |
          cd dist && zip -r ../release.zip .
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release.zip
          fail_on_unmatched_files: true
